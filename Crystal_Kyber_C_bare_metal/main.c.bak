#include <stdlib.h>
#include <stdint.h>
#include "ajit_access_routines.h"
#include <cortos.h>
#include <math.h>

#define ACCELERATOR_REGISTERS_BASE_ADDRESS 0xFFFF4000

#define REG_DMA_CONTROL 			0x00 // Reg 0: for DMA inputs: R/W : bit 0 -> start,  bit 1-> done
#define REG_DMA_COMMAND 			0x04 // Reg 1: for DMA inputs: R/W : bit 0 -> Load data to accelrator, bit 1 -> Fetch data from accelerator
#define REG_DMA_NO_OF_INPUT_LENGTH	0x08 // Reg 2: for DMA inputs: R/W : 1024
#define REG_DMA_MEM_BASE_ADDRESS	0x0C // Reg 3: for DMA inputs: R/W : Mem_base_address
#define REG_ACCEL_CONTROL 			0x10 // Reg 4: for Accel input: R/W : bit 0 -> start accel,  bit 1 -> done accel, bit [2:14] -> size or length of data
#define REG_ACCEL_VALID				0x14 // Reg 5: for accel valid data : R : bit 0-> Valid
#define REG_ACCEL_OVERFLOW			0x18 // Reg 6: for accel overflow data : R : bit 0-> Valid
#define REG_ACCEL_FIFO1_COUNTER		0x1C // Reg 7: for accel read mem fifo data count : R : bit 0-> Valid
#define REG_ACCEL_FIFO2_COUNTER		0x20 // Reg 8: for accel write mem fifo data count : R : bit 0-> Valid


/*#define LOAD  			0x00000001
#define RUN   			0x00000002
#define RST   			0x00000001*/
#define DATA_LENGTH 	1024



volatile int interrupt_counter = 0;
volatile int volatile interrupt_flag = 0;
uint64_t total_time;

uint64_t out_data[DATA_LENGTH] __attribute__ ((aligned (8)));

uint64_t in_data[DATA_LENGTH] __attribute__ ((aligned (8))) = {0x00000000007eff93 , 0x000000000053ffef , 0x000000000017007b , 0x000000000082ff0f , 0x00000000ff93001a ,
0x0000000000feffd5 , 0x00000000fff2ffd2 ,0x00000000009700f5 ,0x00000000004dffa1 ,0x00000000ff2800ee ,0x00000000009c00bf ,
0x0000000000b60006 ,0x0000000000dfffb3 ,0x00000000008d0031 , 0x0000000000f400e2 ,0x0000000000baff4a ,0x00000000000a007d ,
0x00000000ffc9ff23 ,0x00000000ff7e0035 ,0x00000000ff070014 ,0x00000000ffefffdc ,0x00000000ff5a000f ,0x000000000085ff01 ,
0x00000000ffb3ffd1 ,0x00000000ff780096 ,0x00000000ff7000e8 ,0x0000000000aaffbf ,0x0000000000000013 ,0x00000000ff6e00a5 ,
0x00000000ff0a00c7 ,0x00000000ffd1ffa6 ,0x000000000014ff12 ,0x00000000ff3c00b2 ,0x0000000000390072 ,0x00000000ff34ff93 ,
0x00000000ffd2ffd8 ,0x00000000ffc40056 ,0x00000000001a0090 ,0x00000000001effca ,0x00000000000d00d1 ,0x00000000ff92ff65 ,
0x000000000075ff9d ,0x0000000000ab006c ,0x00000000004fff2c ,0x000000000035ffdb ,0x00000000ffa800b9 ,0x00000000ff4cffb0 ,
0x00000000ffb0ffef ,0x00000000ff11ff07 ,0x00000000ffdcff92 ,0x00000000007fffb3 ,0x00000000ff9a0097 ,0x000000000046ff8b ,
0x0000000000f9007c ,0x0000000000baffb8 ,0x0000000000c800a9 ,0x0000000000ea008e ,0x0000000000d400b9 ,0x00000000004eff87 ,
0x00000000ff2b0077 ,0x00000000008200d6 ,0x00000000ffbfffb3 ,0x0000000000f70068 ,0x00000000ff38ff22 ,0x00000000ffb8004c ,
0x00000000007a007f ,0x00000000ff6b004a ,0x00000000ff78ff6f ,0x00000000ffb5ffcb ,0x00000000ff2eff2f ,0x00000000ffc7ff9c ,
0x00000000ff0f0056 ,0x0000000000cb000f ,0x0000000000a400ce ,0x000000000070004c ,0x0000000000bf00a6 ,0x00000000ff9e00c2 ,
0x00000000fff5ff45 ,0x00000000ffc5ffe2 ,0x00000000ff45ffd3 ,0x00000000001c0042 ,0x00000000ff1400a4 ,0x00000000ff71ff54 ,
0x00000000ff10ff16 ,0x00000000fffaff1e ,0x00000000ff24ff67 ,0x00000000ff59ffd3 ,0x00000000ff64ffc5 ,0x0000000000900058 ,
0x00000000ffd6ffa1 ,0x00000000ffafff36 ,0x00000000ff03ffd6 ,0x00000000ff86ff05 ,0x000000000070ff71 ,0x00000000ff3cff6a ,
0x00000000ff7f00b9 ,0x00000000009fff0a ,0x00000000ff2b00c7 ,0x00000000006cffa6 ,0x00000000ffdc0014 ,0x00000000ff5cff65 ,
0x00000000ff570031 ,0x00000000002f0100 ,0x00000000ff2f000d ,0x00000000ff22ff06 ,0x00000000ffe8005a ,0x0000000000650064 ,
0x00000000ff2c007a ,0x00000000ff70ff83 ,0x0000000000a9009c ,0x0000000000d00042 ,0x00000000ff59ff11 ,0x00000000004bffa3 ,
0x00000000ff880024 ,0x00000000006dff8c ,0x00000000004eff8e ,0x000000000087008f ,0x00000000008200db ,0x00000000004eff6c ,
0x00000000ff92ff69 ,0x0000000000700016 ,0x0000000000d90022 ,0x0000000000baff0e ,0x00000000ff4600d2 ,0x000000000046ff74 ,
0x000000000039ff08 ,0x00000000ff77ffcb ,0x0000000000750012 ,0x00000000007dff7b ,0x00000000002aff6e ,0x00000000ff58ffe8 ,
0x00000000008c00ba ,0x00000000ff470026 ,0x00000000ff5000db ,0x0000000000540058 ,0x00000000ffc2ffbe ,0x00000000004f003c ,
0x00000000006affdd ,0x00000000ffbaff50 ,0x00000000fff9ffc2 ,0x00000000ffa9001a ,0x00000000ff1effd8 ,0x00000000ff2000a7 ,
0x00000000ff1c00af ,0x00000000ff5fff00 ,0x00000000ff120048 ,0x00000000ffb5007b ,0x00000000ffd200f1 ,0x00000000ffadff8b ,
0x000000000010ff6a ,0x00000000008200c5 ,0x00000000ff0b004e ,0x00000000ffd3001b ,0x000000000092ff92 ,0x00000000ff43001e ,
0x00000000ff7eff00 ,0x0000000000030038 ,0x00000000ff97004f ,0x00000000ffd5004d ,0x00000000007b0095 ,0x00000000ffb50089 ,
0x00000000ff33003b ,0x00000000ff14ff56 ,0x00000000ffd9ff19 ,0x000000000100ff3f ,0x00000000fffb00bc ,0x00000000ff73ff4f ,
0x000000000060ffda ,0x00000000ffaaffb4 ,0x0000000000d100aa ,0x0000000000020016 ,0x00000000ff1b0079 ,0x00000000ff8c00fb ,
0x00000000ff98ff25 ,0x00000000003fffbd ,0x00000000ffe500be ,0x0000000000380025 ,0x00000000009aff11 ,0x00000000002fff1b ,
0x0000000000210049 ,0x0000000000fe00d5 ,0x00000000ffe90069 ,0x00000000ff44005d ,0x0000000000ad0083 ,0x00000000ffc800e1 ,
0x000000000069ffc1 ,0x0000000000c3ff1d ,0x000000000011ff6e ,0x000000000018003e ,0x0000000000cdffcd ,0x00000000ffbf0011 ,
0x00000000ff360097 ,0x00000000004c0017 ,0x00000000ffdeff60 ,0x00000000fffb00a1 ,0x00000000ff09ffc4 ,0x0000000000210088 ,
0x00000000ff6b0047 ,0x000000000081ff78 ,0x00000000fff8ffa2 ,0x0000000000b4006c ,0x00000000ffd500db ,0x00000000ff90fff5 ,
0x000000000088ffcf ,0x00000000ff52ff97 ,0x00000000004eff2b ,0x0000000000dc0059 ,0x00000000008eff4d ,0x00000000ff21002d ,
0x0000000000a8ff4e ,0x00000000ff49ff4d ,0x00000000ff4f00fe ,0x0000000000170078 ,0x0000000000fbff8c ,0x0000000000c00020 ,
0x00000000ff4700f8 ,0x0000000000f5ff60 ,0x0000000000d400f8 ,0x00000000ff10ff78 ,0x00000000ff3e0044 ,0x0000000000bf00bc ,
0x00000000002c0018 ,0x00000000ff1d000c ,0x00000000ff96007f ,0x0000000000c3ffcf ,0x000000000065ff56 ,0x00000000000200a3 ,
0x00000000000effad ,0x00000000ffb1ff50 ,0x00000000ff3cfffb ,0x00000000007d0081 ,0x00000000ff7f00a1 ,0x0000000000380058 ,
0x00000000fff1ff59 ,0x00000000ffa2001f ,0x0000000000d8ff70 ,0x0000000000a000ef ,0x00000000ff890083 ,0x00000000ff56ff5d ,
0x000000000060ff2b ,0x000000000084fffb ,0x0000000000baffdf ,0x000000000040ff3b ,0x00000000ff0800ea ,0x0000000000fb0052 ,
0x00000000002d00ca ,0x00000000ff880100 ,0x0000000000b1ff52 ,0x00000000ff9dff2d ,0x0000000000d2ffa6 ,0x00000000009b00d9 ,
0x00000000002c00cd ,0x00000000ff52ff00 ,0x00000000ff2d0064 ,0x00000000fff30071 ,0x000000000100ffc1 ,0x00000000ffe50003 ,
0x0000000000470005 ,0x0000000000dcff80 ,0x00000000ffc9ff35 ,0x000000000063ffa2 ,0x00000000002bffaa ,0x00000000003a0091 ,
0x00000000ffa300cc ,0x00000000ff9d0069 ,0x0000000000db0052 ,0x00000000ff79ffe8 ,0x0000000000d2ffe2 ,0x0000000000260037 ,
0x00000000004dff1b ,0x00000000ff1c0014 ,0x00000000007400c6 ,0x00000000ffce0008 ,0x00000000ff78ffed ,0x0000000000c0ff9b ,
0x00000000ffa5ff25 ,0x0000000000daff9e ,0x00000000ff9e000d ,0x00000000007cff8c ,0x00000000ff76ff95 ,0x000000000069ffe0 ,
0x0000000000f3ff8f ,0x0000000000ae00ec ,0x00000000ffdf000f ,0x00000000006f0055 ,0x00000000ff1cff43 ,0x00000000006a00c0 ,
0x00000000ff870023 ,0x00000000006effe5 ,0x00000000fffa00e2 ,0x00000000ffb7006e ,0x00000000ff8fff14 ,0x00000000001a0058 ,
0x00000000ffb8ff2b ,0x00000000ff300072 ,0x00000000ff61ff66 ,0x00000000ff9f004b ,0x0000000000eaffa5 ,0x00000000ff1aff70 ,
0x00000000ff09ffa5 ,0x00000000ff570089 ,0x00000000fff400f7 ,0x0000000000bdff2d ,0x00000000ffa4ffcc ,0x00000000ff0200cb ,
0x00000000ff9500ef ,0x00000000ff4d00c9 ,0x00000000ff60ff58 ,0x00000000003400f3 ,0x00000000fffafffe ,0x00000000006bff28 ,
0x00000000ff5800ef ,0x00000000ff830060 ,0x00000000009b00e4 ,0x00000000009bff06 ,0x00000000ff54ff1e ,0x00000000ff2f00e3 ,
0x00000000001500e7 ,0x00000000ff94ff68 ,0x0000000000e5ffb0 ,0x00000000fff50048 ,0x0000000000980051 ,0x0000000000c9ff24 ,
0x00000000ff3bff01 ,0x0000000000c8ff95 ,0x000000000056ffb5 ,0x0000000000060067 ,0x00000000ff52ff6f ,0x00000000008b006f ,
0x00000000ff5eff34 ,0x0000000000240095 ,0x00000000ff750076 ,0x00000000ff5900db ,0x00000000007000e6 ,0x0000000000ff006a ,
0x00000000005bff60 ,0x0000000000d00053 ,0x00000000ff8fff4a ,0x0000000000afffe3 ,0x00000000ff77007b ,0x00000000ff8aff71 ,
0x00000000005bffb7 ,0x00000000ff600057 ,0x00000000ff22ff66 ,0x00000000ff3b0034 ,0x00000000ffb9008f ,0x00000000ff3f006e ,
0x00000000ff56ffba ,0x00000000ff7800a6 ,0x00000000001100ee ,0x000000000068ff37 ,0x00000000ff860085 ,0x0000000000d2009e ,
0x000000000033ffc1 ,0x00000000ffd200dd ,0x00000000ff98003e ,0x00000000009b0031 ,0x00000000ff19ff1c ,0x00000000ff7eff41 ,
0x0000000000b6ff4d ,0x00000000009aff70 ,0x000000000002ff83 ,0x0000000000ddffc2 ,0x0000000000a9ff82 ,0x00000000ff33ffea ,
0x000000000066ff81 ,0x00000000ffcc0011 ,0x0000000000380068 ,0x00000000ff06000c ,0x00000000ff9f0082 ,0x00000000ff64ff68 ,
0x00000000ffc8ffca ,0x00000000ffe50063 ,0x00000000ff31ff05 ,0x00000000007affb3 ,0x0000000000450024 ,0x00000000009d00f0 ,
0x00000000ffd1ffd4 ,0x00000000009c00d1 ,0x0000000000fdff0a ,0x0000000000f40092 ,0x00000000ff59ff29 ,0x000000000037ff2a ,
0x000000000000ffb5 ,0x00000000ff7afff5 ,0x00000000ff35ff4c ,0x00000000ffd4ffbd ,0x00000000ff9b001a ,0x00000000fff90023 ,
0x0000000000d2ffcf ,0x0000000000cffff9 ,0x0000000000090013 ,0x00000000ffb80030 ,0x00000000ff290034 ,0x00000000ff1000d2 ,
0x00000000008800f0 ,0x00000000ff93ff24 ,0x0000000000ed00c0 ,0x00000000fff80042 ,0x00000000ffb100f7 ,0x0000000000310004 ,
0x00000000ff1900f0 ,0x00000000ffe700e0 ,0x00000000ff4e003b ,0x00000000ff82fff8 ,0x00000000ff180096 ,0x00000000003b00aa ,
0x00000000006aff02 ,0x0000000000710055 ,0x0000000000dcffb5 ,0x0000000000b1fff2 ,0x00000000009fff02 ,0x00000000ff1600f1 ,
0x00000000fff300f6 ,0x00000000ffc6007e ,0x00000000ff0fff6e ,0x00000000001cffc9 ,0x00000000001d009f ,0x00000000ffe3003a ,
0x00000000ff4eff32 ,0x00000000ffdb008f ,0x00000000ff3500af ,0x0000000000df00b4 ,0x00000000ffb3ffc3 ,0x00000000007d00bb ,
0x0000000000f700a5 ,0x0000000000630005 ,0x00000000ff3e00fa ,0x0000000000180040 ,0x00000000ffb3ff7d ,0x00000000ff1fff2a ,
0x0000000000f500e3 ,0x00000000ff92ff89 ,0x00000000ff910051 ,0x00000000ffd2ff67 ,0x00000000ffa80024 ,0x00000000ff01007c ,
0x00000000ff8800a8 ,0x00000000ffb6ffa2 ,0x0000000000ceffd7 ,0x000000000094ff4b ,0x0000000000ccfff9 ,0x0000000000f0ff3c ,
0x000000000063ff0f ,0x00000000fff60062 ,0x00000000ffb7ff0c ,0x00000000000a00fc ,0x00000000001c00c7 ,0x000000000020ff13 ,
0x00000000ff700090 ,0x00000000ffe20051 ,0x00000000ff4d004a ,0x00000000ff910028 ,0x0000000000660018 ,0x0000000000bdff3d ,
0x00000000ff91ffa6 ,0x00000000ff2e0054 ,0x00000000ff5f0092 ,0x00000000ff4100e3 ,0x00000000ff07ffd3 ,0x00000000ff340051 ,
0x0000000000ca00a9 ,0x00000000ffa2ffbf ,0x00000000ff34ff8e ,0x00000000fff6ff41 ,0x00000000ff38ff38 ,0x00000000ff8e006c ,
0x00000000003cff3e ,0x00000000ff1bffbe ,0x000000000046004f ,0x000000000003ffbf ,0x00000000ff7a0088 ,0x0000000000190010 ,
0x0000000000f700cb ,0x000000000096004c ,0x00000000003a0082 ,0x00000000ff1300af ,0x00000000ff36003c ,0x000000000026ff53 ,
0x00000000ff73009d ,0x00000000fffeff71 ,0x00000000ffc6ff28 ,0x000000000084ffdc ,0x0000000000ffff0a ,0x0000000000f1ff49 ,
0x00000000ff4dff01 ,0x00000000ffb600f6 ,0x00000000ff0d007e ,0x00000000ff4dffe7 ,0x0000000000ef00b5 ,0x00000000ff6e0027 ,
0x0000000000e7ff6b ,0x00000000ff190036 ,0x00000000ff1cff46 ,0x00000000ffeb00a0 ,0x000000000026ff63 ,0x00000000ffb00079 ,
0x00000000008100d6 ,0x00000000fff6ffbd ,0x00000000005fff07 ,0x0000000000b300a0 ,0x0000000000d500e4 ,0x00000000ff7bff4f ,
0x0000000000340049 ,0x000000000004ff90 ,0x00000000ffc90094 ,0x00000000ff4a0055 ,0x00000000ffbb006c ,0x00000000004800bb ,
0x00000000ff0e0074 ,0x0000000000c5ffd9 ,0x0000000000f7ff0c ,0x00000000ffc5fff9 ,0x00000000ff1900ef ,0x00000000fffbffd6 ,
0x00000000ff0c0019 ,0x0000000000db0084 ,0x000000000027ff75 ,0x0000000000f8ff94 ,0x00000000ff9c0022 ,0x0000000000f10070 ,
0x00000000ffee008f ,0x000000000015ff73 ,0x00000000ff97ff20 ,0x00000000006fffa0 ,0x0000000000540050 ,0x00000000005cff9f ,
0x00000000009dff2b ,0x00000000ffc8002d ,0x00000000ffafff3f ,0x0000000000840009 ,0x00000000ffa30063 ,0x0000000000c1ff34 ,
0x00000000ffd90070 ,0x00000000ff67008b ,0x000000000032ff78 ,0x00000000ff730065 ,0x00000000ffa800d0 ,0x00000000008800c7 ,
0x00000000ff55ff0a ,0x00000000007400fd ,0x00000000fff10068 ,0x000000000063ff6d ,0x00000000006bffbe ,0x00000000ff40007e ,
0x0000000000ecff86 ,0x00000000ff5a0085 ,0x00000000ffc4ffb2 ,0x0000000000c1ffa8 ,0x00000000ffdd0076 ,0x00000000ffaaff3c ,
0x0000000000520093 ,0x000000000016002a ,0x00000000ff5d00ba ,0x00000000ff8d00ec ,0x000000000098ff92 ,0x0000000000c2009c ,
0x0000000000410064 ,0x000000000029008f ,0x0000000000bc00ef ,0x00000000ff5bff8c ,0x00000000ff990098 ,0x000000000035009b ,
0x0000000000b0ffec ,0x00000000ff380089 ,0x0000000000cf00f8 ,0x00000000ffdbff58 ,0x00000000fff0009c ,0x000000000082ffd0 ,
0x00000000ff81008b ,0x00000000008400df ,0x0000000000e2ff4b ,0x000000000023ffe2 ,0x0000000000b3fff6 ,0x00000000001100a0 ,
0x0000000000840011 ,0x0000000000cb00a4 ,0x00000000ff4bffd6 ,0x0000000000e4ffbc ,0x000000000100ff3c ,0x00000000ffd50048 ,
0x00000000ff9f00a5 ,0x00000000006d00bd ,0x000000000037ffff ,0x00000000001dff67 ,0x00000000ff1300a4 ,0x00000000ff6affd1 ,
0x00000000ff18ff68 ,0x000000000041ff71 ,0x00000000ffe4ff31 ,0x00000000007eff82 ,0x00000000ff9e000c ,0x000000000024ffe4 ,
0x00000000ffabffb7 ,0x00000000fff4ff13 ,0x00000000005100b9 ,0x000000000072ff46 ,0x0000000000deff66 ,0x0000000000d8ffbf ,
0x00000000ff9300e6 ,0x0000000000a6ff4e ,0x0000000000ea0091 ,0x00000000ff800076 ,0x00000000ffd4fffc ,0x00000000ff830045 ,
0x00000000ffc2ff6d ,0x0000000000a9ff9e ,0x0000000000baffb4 ,0x00000000005b006d ,0x00000000005cff93 ,0x00000000004300e5 ,
0x00000000006bff9a ,0x0000000000db0028 ,0x00000000ff4e00fe ,0x000000000009ffb5 ,0x00000000fffd0076 ,0x00000000ff62ff83 ,
0x000000000046009a ,0x00000000ff7eff63 ,0x00000000ffa600f8 ,0x00000000009b002d ,0x0000000000170009 ,0x000000000025ffd0 ,
0x00000000001700ef ,0x00000000ff30ffe4 ,0x0000000000700090 ,0x00000000fffa0100 ,0x00000000fff800b4 ,0x0000000000220022 ,
0x00000000ffb000d4 ,0x00000000ffad008c ,0x00000000ff8dff63 ,0x000000000032ff45 ,0x000000000090006c ,0x00000000ffedff8b ,
0x0000000000b9ff7a ,0x00000000ff61ff77 ,0x00000000004300d8 ,0x00000000ff11ff1b ,0x00000000ff7e008b ,0x00000000ff590042 ,
0x0000000000e1ff52 ,0x00000000ffecff14 ,0x00000000ffb3ff56 ,0x0000000000e00090 ,0x00000000004aff4c ,0x0000000000bc009d ,
0x0000000000b8ff99 ,0x00000000ff8a00df ,0x0000000000f9ff7d ,0x00000000fff900da ,0x0000000000f9ffee ,0x00000000ffe400c3 ,
0x00000000ff3f0019 ,0x00000000ff16ffe6 ,0x0000000000c200d3 ,0x0000000000f20091 ,0x00000000006d003d ,0x00000000ffc8006b ,
0x0000000000d40074 ,0x0000000000e3ffcd ,0x00000000ff8c006f ,0x000000000092ff8b ,0x00000000ff1fff85 ,0x0000000000fdff88 ,
0x000000000054ff45 ,0x0000000000c10021 ,0x000000000043001d ,0x00000000ff42003a ,0x00000000ff6700e8 ,0x00000000fffa007f ,
0x0000000000b7ff18 ,0x00000000ff350062 ,0x00000000ff950089 ,0x00000000007f0085 ,0x00000000ff100040 ,0x00000000ffe100e3 ,
0x00000000ffc3ff6b ,0x00000000ff09ff00 ,0x00000000ff8cffe2 ,0x00000000008d003a ,0x0000000000d4ffb4 ,0x00000000ff870004 ,
0x00000000ff52ffba ,0x00000000ffcb009b ,0x00000000006900e3 ,0x0000000000f7ff6c ,0x00000000ffdbff73 ,0x00000000ff73004c ,
0x000000000027ffd0 ,0x00000000ff7aff8a ,0x0000000000b4fff3 ,0x00000000ff98ff4c ,0x00000000ff64ff3b ,0x0000000000ceff92 ,
0x00000000ff1700c6 ,0x0000000000ed008e ,0x00000000ff35ff58 ,0x00000000007d0078 ,0x00000000ff3c0027 ,0x000000000085ff41 ,
0x0000000000dbffa0 ,0x0000000000beffbf ,0x000000000030004e ,0x00000000ff4500fa ,0x0000000000630045 ,0x00000000001300a9 ,
0x00000000ffbd003b ,0x00000000ff84ff94 ,0x00000000ff970056 ,0x00000000004100be ,0x00000000ff4fffe1 ,0x00000000ffeb00eb ,
0x00000000ff98ff2e ,0x000000000094ff13 ,0x00000000ffdcff88 ,0x00000000fff3ff5d ,0x00000000ff4bff08 ,0x0000000000960067 ,
0x0000000000100050 ,0x00000000fffcff4c ,0x00000000ff2bff26 ,0x00000000ff56ffc5 ,0x0000000000ecff26 ,0x0000000000b9005b ,
0x00000000ff93ff40 ,0x00000000ffe300d8 ,0x00000000ff8effd2 ,0x00000000ffe0ffa5 ,0x00000000fff9ff13 ,0x00000000007c0006 ,
0x00000000ff5cff9a ,0x00000000ff8effdd ,0x0000000000f000b7 ,0x00000000ff2cffbf ,0x00000000ff00ffdb ,0x00000000ff58002e ,
0x0000000000e2ff4b ,0x00000000ffb90069 ,0x00000000ff78ff1d ,0x000000000068ff1e ,0x00000000ff820043 ,0x00000000003e000b ,
0x000000000038ffcb ,0x0000000000d800e4 ,0x0000000000c80076 ,0x000000000045ff73 ,0x00000000ffe900b2 ,0x00000000ff1aff14 ,
0x0000000000c5ff22 ,0x00000000ff5f001e ,0x00000000ffaeff7c ,0x00000000ffeb0064 ,0x00000000ffcb003b ,0x00000000ff6ffffa ,
0x0000000000690024 ,0x00000000ff3100fe ,0x00000000ff62ff1e ,0x00000000007600bc ,0x0000000000b1003e ,0x00000000ffc7006e ,
0x0000000000afff43 ,0x00000000ff77ff46 ,0x000000000062ff13 ,0x00000000ffebfffe ,0x0000000000e000a6 ,0x000000000049001e ,
0x0000000000480041 ,0x0000000000abff80 ,0x0000000000e900e5 ,0x00000000ff7affd9 ,0x00000000ff79001f ,0x00000000ffccffc6 ,
0x00000000ff5f002e ,0x0000000000d4ffd2 ,0x00000000ff710082 ,0x000000000099ff0d ,0x00000000ff5c005d ,0x00000000ff290057 ,
0x00000000002aff2d ,0x00000000006600e5 ,0x00000000ff06ff90 ,0x000000000069003e ,0x00000000002dff25 ,0x0000000000fc00da ,
0x000000000037003f ,0x0000000000f80015 ,0x0000000000c7ffff ,0x00000000ff12ffee ,0x00000000002eff8d ,0x00000000001b0078 ,
0x00000000ffa000dc ,0x00000000001fff71 ,0x00000000ff8f0074 ,0x00000000008b0090 ,0x00000000ffe3fff6 ,0x0000000000a30012 ,
0x0000000000abffa9 ,0x00000000007c00cf ,0x0000000000dfff18 ,0x00000000ff93ff67 ,0x00000000ff6500ee ,0x00000000ff43ff9e ,
0x00000000009d008f ,0x0000000000b3ffc6 ,0x00000000ffdc00b3 ,0x000000000047003a ,0x00000000ff10ff67 ,0x0000000000f2003c ,
0x00000000ff910023 ,0x00000000ff2500dc ,0x00000000ff48ff7b ,0x00000000ff390092 ,0x00000000ff44007b ,0x0000000000330090 ,
0x00000000ff110063 ,0x00000000ffba0095 ,0x000000000085ff76 ,0x00000000ffe300dd ,0x0000000000fbff08 ,0x0000000000a3ff28 ,
0x0000000000e00072 ,0x00000000ff01ff75 ,0x00000000ffa5ffcf ,0x00000000ffa9fff7 ,0x00000000ffc2ff06 ,0x00000000002fff1c ,
0x0000000000e60023 ,0x00000000005fff5f ,0x0000000000ebffe1 ,0x00000000ffddff76 ,0x00000000ff860082 ,0x00000000ff69ffb6 ,
0x00000000ffd0ff38 ,0x00000000ff5bff2c ,0x00000000002800a1 ,0x00000000ff2b003a ,0x0000000000a3ff08 ,0x00000000001e0085 ,
0x00000000ff33ff46 ,0x00000000ff5b00eb ,0x00000000ff59ff2b ,0x00000000ffecff6a ,0x00000000ff38007a ,0x0000000000d00073 ,
0x00000000006a00f4 ,0x000000000032ff52 ,0x00000000ff750006 ,0x000000000001ff2e ,0x0000000000bbfffe ,0x00000000ff130078 ,
0x00000000ff7f00f6 ,0x00000000003e0032 ,0x000000000045001b ,0x00000000ffa500a6 ,0x0000000000cd00fc ,0x0000000000bfff29 ,
0x00000000ff62ffe6 ,0x000000000048ffa3 ,0x0000000000ebfffe ,0x0000000000a8ff66 ,0x000000000085ff54 ,0x0000000000f9fff6 ,
0x00000000ff7b00c1 ,0x0000000000ec0011 ,0x00000000007dff5d ,0x000000000007ff99 ,0x00000000ffb400dd ,0x00000000002e004d ,
0x00000000000a0023 ,0x00000000004fff9e ,0x00000000003700e2 ,0x00000000004dff9c ,0x00000000ff150081 ,0x0000000000150012 ,
0x00000000ff1500e1 ,0x00000000ff11fffb ,0x00000000ff9aff8c ,0x000000000007ff81 ,0x00000000ff2d0070 ,0x00000000001aff15 ,
0x00000000ffbc005c ,0x00000000ff5dfffc ,0x00000000ff67ff7f ,0x00000000ffdc00a4 ,0x00000000ff77ff0f ,0x000000000076ff14 ,
0x00000000ff1300b2 ,0x0000000000270057 ,0x00000000005c000d ,0x0000000000560079 ,0x00000000001cff2e ,0x00000000ff0a0017 ,
0x00000000002fff9c ,0x00000000ff1b0056 ,0x00000000002d0079 ,0x00000000ff8eff86 ,0x00000000ffa4ff00 ,0x00000000ff7dff96 ,
0x00000000fffeff35 ,0x00000000ff270033 ,0x00000000ffde00cb ,0x00000000ffd900dc ,0x00000000ff8e0075 ,0x00000000ffb4ff10 ,
0x00000000ff720047 ,0x00000000ff27fff3 ,0x0000000000ce0059 ,0x0000000000ecffa9 ,0x00000000ff3d0092 ,0x000000000091ffc7 ,
0x00000000ff0b003f ,0x00000000ff760073 ,0x00000000ff8cff4e ,0x00000000ff61007f ,0x00000000ff33ff5d ,0x00000000ff4c00ca ,
0x00000000ff9500e3 ,0x0000000000d5ffda ,0x00000000ff23ff48 ,0x0000000000e1ffa8 ,0x00000000ff3200bf ,0x000000000032ff79 ,
0x00000000ffcbff5c ,0x000000000094ffc5 ,0x00000000007d0090 ,0x00000000ff25ffea ,0x00000000ff3a005b ,0x00000000ff6aff72 ,
0x00000000fffaff04 ,0x00000000000d000d ,0x00000000ff8d004b ,0x00000000004e0010 ,0x00000000ff95ff29 ,0x00000000ff25001e ,
0x000000000016ff8c ,0x00000000ff73002a ,0x00000000001700a1 ,0x0000000000c6ff46 ,0x00000000ffadffc4 ,0x00000000ff57ffb3 ,
0x00000000ffa000bf ,0x00000000007400f9 ,0x00000000ff59ff0c ,0x00000000002fffc6 ,0x00000000007c0092 ,0x00000000ffbb0040 ,
0x00000000ff29ff9c ,0x00000000ff8400f4 ,0x00000000ffa50000 ,0x000000000096ffec ,0x0000000000dc0061 ,0x00000000ff6effa7 ,
0x0000000000ba0056 ,0x00000000ff800008 ,0x000000000061ffdf ,0x00000000005d0006 ,0x000000000064ff33 ,0x0000000000ccfff8 ,
0x000000000053004f ,0x0000000000d2ff6f ,0x00000000009100da ,0x00000000ff56ff90 ,0x000000000011006c ,0x0000000000d7ffd1 ,
0x0000000000a7007c ,0x000000000031ff17 ,0x00000000ffb4ff2f ,0x00000000005f00c4 ,0x00000000ffd200e7 ,0x00000000ff49ffe8 ,
0x0000000000f40044 ,0x0000000000daffb5 ,0x0000000000f40057 ,0x00000000ffc90043 ,0x00000000006cffb7 ,0x00000000fff00004 ,
0x0000000000d4008a ,0x00000000ff0b00b7 ,0x00000000ffeb00cd ,0x0000000000f50031 ,0x000000000093ff88 ,0x00000000ff24ffe9 ,
0x000000000052003d ,0x00000000ff1cff89 ,0x0000000000dc00cb ,0x00000000fff900d0 ,0x00000000003900fe ,0x00000000007c008c ,
0x0000000000bcff7c ,0x00000000ff830011 ,0x00000000ff9100b1 ,0x000000000064ff40 ,0x00000000ff7800ba ,0x00000000ff2c00ec ,
0x0000000000d6006b ,0x00000000ff61ffd2 ,0x00000000ff24ff32 ,0x0000000000f3007a ,0x00000000ff4cff84 ,0x00000000ff3b004f ,
0x00000000ff8fff84 ,0x000000000000007a ,0x0000000000c300f1 ,0x00000000ffebff10 ,0x0000000000d9ff71 ,0x00000000007700bb ,
0x0000000000ce00dd ,0x00000000ff3700b2 ,0x00000000ff17ffd2 ,0x0000000000c70099 ,0x000000000021ff39 ,0x00000000006f00df ,
0x00000000ff2700ca ,0x0000000000bf0088 ,0x00000000ffefffde ,0x0000000000d5ff58 ,0x000000000039fffb ,0x00000000ffc7ffab ,
0x000000000094ffbf ,0x000000000042ffb5 ,0x000000000063ff34 ,0x0000000000d2ff69 ,0x000000000015ffc3 };




void setup()
{
	// configure uart
	__ajit_serial_configure__(1,0,0);
	__ajit_serial_set_baudrate__ (115200, 80000000);
	__ajit_serial_set_uart_reset__ (0);

	cortos_printf ("enabled serial.\n");

	// enable interrupt controller for the current thread.

	enableInterruptControllerAndAllInterrupts(0,0);
	cortos_printf ("enabled interrupt controller.\n");

}


void write_to_accelerator_register (uint32_t reg_id, uint32_t val)
{
	__ajit_store_word_mmu_bypass__(val, ACCELERATOR_REGISTERS_BASE_ADDRESS + (reg_id));
}


uint32_t read_from_accelerator_register (uint32_t reg_id)
{
	uint32_t val = __ajit_load_word_mmu_bypass__ (ACCELERATOR_REGISTERS_BASE_ADDRESS + (reg_id));
	return(val);
}

void my_external_interrupt_handler ()
{

}

void init_shared_memory()
{
	uint32_t J;
	uint64_t* ptr = (uint64_t*) &(out_data[0]);
	for(J = 0; J < (DATA_LENGTH); J++)
	{
		ptr[J] = 1;
	}
}

void dump_memory ()
{
	//cortos_printf ("memory dump %d.\n", I);
	uint32_t J;
	uint64_t* ptr = (uint64_t*) &(out_data[0]);
	for(J = 0; J < (DATA_LENGTH); J++)
	{
		cortos_printf ("0x%x ", ptr[J]);
	}
}



void main () 
{	
	init_shared_memory();
	
	//prepare DMA read memory function to load accelerator fifo1
	
	write_to_accelerator_register (REG_DMA_MEM_BASE_ADDRESS, (uint32_t) (&(in_data[0]))); //load reg 3 with base address
	write_to_accelerator_register (REG_DMA_NO_OF_INPUT_LENGTH, (uint32_t)DATA_LENGTH); // Load no. of inputs
	write_to_accelerator_register (REG_DMA_COMMAND, 0x00000001); // command for load operation to accelerator
	write_to_accelerator_register (REG_DMA_CONTROL, 0x00000001); // start load operation 
	
	// wait while accel finishes executing load command iteration in DMA
	
		
	while ((read_from_accelerator_register(REG_DMA_CONTROL) & 0x2) == 0);
	
	CORTOS_DEBUG ("The fifo1 counter values is %d\n", (read_from_accelerator_register(REG_ACCEL_FIFO1_COUNTER));
	
	//start accelerator operation
	
	write_to_accelerator_register (REG_ACCEL_CONTROL, ((2<<(uint32_t)DATA_LENGTH)) + 0x1); // start accel operation 
	
	while ((read_from_accelerator_register(REG_ACCEL_CONTROL) & 0x2) == 0);
	
	CORTOS_DEBUG ("The fifo1 counter values is %d\n", (read_from_accelerator_register(REG_ACCEL_FIFO2_COUNTER));
	
	//prepare DMA for fetch operation from accelerator
	
	write_to_accelerator_register (REG_DMA_MEM_BASE_ADDRESS, (uint32_t) (&(out_data[0]))); //load reg 3 with base address
	write_to_accelerator_register (REG_DMA_NO_OF_INPUT_LENGTH, (uint32_t)DATA_LENGTH); // Load no. of inputs
	write_to_accelerator_register (REG_DMA_COMMAND, 0x00000002); // command for load operation to accelerator
	write_to_accelerator_register (REG_DMA_CONTROL, 0x00000001); // start load operation 
	
	while ((read_from_accelerator_register(REG_DMA_CONTROL) & 0x2) == 0);
	
	CORTOS_DEBUG ("The fifo1 counter values is %d\n", (read_from_accelerator_register(REG_ACCEL_FIFO2_COUNTER));
	
	__ajit_flush_dcache__();
	
	/*uint32_t window_size_in_pow_of_two;
	window_size_in_pow_of_two = 2;
	
	uint32_t in_data [DATA_LENGTH]; 
	uint32_t outdata_processor;
	uint32_t out_data_accel;

	uint32_t i;
	uint32_t j;*/

	/*****For timer benchmarking****/

	//volatile uint64_t start_time;
	//volatile uint64_t stop_time;
	


	//dump data in array

	/*for (i = 0; i < 1024; i++)
	{
 	in_data[i * 2] = 304;
	in_data[i * 2 + 1] = 0;
	
	}

	uint32_t read_control_reg;
	uint32_t write_control_reg;
	

	moving_average_filter(0x1, window_size_in_pow_of_two, 0, &outdata_processor);
	
	uint64_t start_time   = __ajit_get_clock_time();  //timer started
	

	for (i = 0 ; i < 1; i++)
	{  	    
	   moving_average_filter(0x2, window_size_in_pow_of_two, in_data[i], &outdata_processor);
	   //cortos_printf ("processor output i = %d  value = %d\n",i, outdata_processor);	   
	}

	uint64_t stop_time   = __ajit_get_clock_time();  //timer stopped

	cortos_printf ("The Processor start time is 0x%lx \n", start_time);
	cortos_printf ("The Processor stop time is 0x%lX\t 0x%lx \n", stop_time, stop_time >> 32);
	
	total_time = stop_time - start_time;
	cortos_printf ("The Processor time is %d %d\n", total_time, total_time>>32);*/

	

	/****** Accelerator Soft reset Starts Here********/

	/*write_to_accelerator_register (REG_COMMAND, RST);
	read_control_reg = read_from_accelerator_register(REG_CONTROL);
	write_control_reg = read_control_reg | 0x1; 
	write_to_accelerator_register (REG_CONTROL, write_control_reg);


	while ((read_from_accelerator_register(REG_CONTROL) & 0x2) == 0);
	
	
	*/
	/****** Accelerator Function Starts Here********/
	/*
	write_to_accelerator_register (REG_WINDOW_SIZE_POW_OF_2, window_size_in_pow_of_two);
	write_to_accelerator_register (REG_COMMAND, RUN);	 

	
	//Exececution RUN command for filter computation

	
	
	for (i =0; i < 1; i++)
	{
		write_to_accelerator_register (REG_DATA_IN, in_data[i]);
		
		// accel started to execute RUN command

		read_control_reg = read_from_accelerator_register(REG_CONTROL);

		
		write_control_reg = read_control_reg | 0x1; 
		write_to_accelerator_register (REG_CONTROL, write_control_reg);

		start_time   = __ajit_get_clock_time();  //timer started

		// wait while accel finishes executing RUN command interation
		
		while ((read_from_accelerator_register(REG_CONTROL) & 0x2) == 0);
		
		stop_time   = __ajit_get_clock_time();  //timer stopped		
		
		//cortos_printf ("The accel output is i = %d , Value = %d \n",i ,read_from_accelerator_register(REG_DATA_OUT));
		
		
	}

	
	total_time = stop_time - start_time;
	
	cortos_printf ("The accelerator time is %d %d\n", total_time, total_time>>32);
	
	CORTOS_DEBUG ("This is debug message\n");

}


void moving_average_filter (uint32_t command,
			    uint32_t window_size_in_pow_of_two,
			    uint32_t in_data,
			    uint32_t *out_data
			   )
{
	static int32_t internalRAM [1024]  = {0};
	static uint32_t head; // to store circular buffer header position
	uint32_t previous_sample_loc;
	static uint32_t window_size_in_nos;
	static uint32_t window_size_in_bits_rcvd;

	int32_t sum;

	if (command == 0x3) //Intentional of all internal regs
	{
		head = 0;
		window_size_in_nos = 0;
		window_size_in_bits_rcvd = 0;
		sum = 0;
	}

	else if (command == 0x1) // compute actual window size and reset all registers
	{
		window_size_in_nos = 1 << window_size_in_pow_of_two;
		window_size_in_bits_rcvd = window_size_in_pow_of_two;
		head = 0;
		sum = 0;
	}

	else if (command == 0x2)
	{
		sum = in_data;
		int i;

		compute_window_filter_sum: for (i = 1; i < window_size_in_nos ; i++)
		{
			previous_sample_loc = (i+head) % window_size_in_nos;
			sum += internalRAM[previous_sample_loc];
		}


		internalRAM[head] = in_data;
		head = (head + 1) % window_size_in_nos;
		sum = sum >> window_size_in_bits_rcvd;
		*out_data = sum;
	}
*/
}



